import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.*;
class Student {
    private int id;
    private String name;
    private double cgpa;
    public Student(String newName, double newGPA, int newID){
        name = newName;
        cgpa = newGPA;
        id = newID;
    }
    public int getID(){
        return id;
    }
    public String getName(){
        return name;
    }
    public double getCGPA(){
        return cgpa;
    }
    
}
 class StudentComparator implements Comparator<Student>{
    // overriding compare() method in Comparator interface
    public int compare(Student a, Student b){
         double aGPA = a.getCGPA();
         double bGPA = b.getCGPA();
         if(aGPA > bGPA){
             // 3.91, 3.90 => -1
             // 3.90, 3.91 => 1
             return -1;
         }
         else if (aGPA < bGPA){
             return 1;
         }
         String aName = a.getName();
         String bName = b.getName();
         int nameComp = aName.compareTo(bName);
         if (nameComp != 0){
             return nameComp;
         }
         /* 4, 6 => -1
            6, 4 => 1
            subtract a's id from b's, to get the sort int.
         */
         return (a.getID() - b.getID());
     }
}
 class Priorities{
     public Priorities(){
         
     }
     public ArrayList<Student> getStudents(List<String> events){
         StudentComparator s = new StudentComparator();
         PriorityQueue<Student> studentList = new PriorityQueue<Student>(1000, s);
         for (String e : events){
             String[] eventArray = e.split(" ");
             double gpa;
             int id;
             switch (eventArray[0]){
                 case "ENTER":
                    gpa = Double.parseDouble(eventArray[2]);
                    id = Integer.parseInt(eventArray[3]);
                    Student newStudent = new Student(eventArray[1], gpa, id);
                    studentList.offer(newStudent);
                 break;
                 case "SERVED":
                    studentList.poll();
                 break;
                 default:
                 break;
             }
         }
         ArrayList<Student> ans = new ArrayList<Student>();
         Student curr;
         while ( (curr = studentList.poll()) != null ){
             ans.add(curr);
         }
         return ans;
     }
 }

public class Solution {
    private final static Scanner scan = new Scanner(System.in);
    private final static Priorities priorities = new Priorities();
    
    public static void main(String[] args) {
        int totalEvents = Integer.parseInt(scan.nextLine());    
        List<String> events = new ArrayList<>();
        
        while (totalEvents-- != 0) {
            String event = scan.nextLine();
            events.add(event);
        }
        
        List<Student> students = priorities.getStudents(events);
        
        if (students.isEmpty()) {
            System.out.println("EMPTY");
        } else {
            for (Student st: students) {
                System.out.println(st.getName());
            }
        }
    }
}
